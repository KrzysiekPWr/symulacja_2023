/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package gradle;

import java.util.ArrayList;
import java.util.concurrent.TimeUnit;

public abstract class Simulation {
    
    static int wait_miliseconds = 100;
    static int simulation_speed = 1;
    public static void main(String[] args) {
        
        //ONE OF THE FOLLOWING LINES SHOULD BE COMMENTED
        //THEY DO NOT WORK ON THE SAME DATA

        //make_simulation_for_script(args); //for script (uncomment if needed)

        show_simulation(); //for testing and showing simulation
    }

    private static void show_simulation(){

        //int map_size = 30;
        //Map map = new Map(0.06, map_size, 2, 3, 3, 3);
        
        //map.show_map();

        //-----------------------------------------------
        //Graphic, panels and sound
        
        menuSimulationFrame menu_frame = new menuSimulationFrame();

        ArrayList<Double> parameters = new ArrayList<Double>();
        do {
            parameters = menu_frame.get_silmlation_parameters();

        }while(menu_frame.start_button.isEnabled() == true);

        Map map = new Map(
        parameters.get(0).doubleValue(),
        parameters.get(1).intValue(),
        parameters.get(2).intValue(),
        parameters.get(3).intValue(),
        parameters.get(4).intValue(),
        parameters.get(5).intValue(),
        parameters.get(6).intValue(),
        parameters.get(7).doubleValue(),
        parameters.get(8).intValue(),
        parameters.get(9).intValue(),
        parameters.get(10).intValue(),
        parameters.get(11).intValue(),
        parameters.get(12).intValue(),
        parameters.get(13).intValue(),
        parameters.get(14).intValue(),
        parameters.get(15).intValue(),
        parameters.get(16).intValue(),
        parameters.get(17).intValue(),
        parameters.get(18).intValue(),
        parameters.get(19).intValue(),
        parameters.get(20).intValue(),
        parameters.get(21).doubleValue());

        map.initialize_map();

        mapGraphicsFrame map_frame = new mapGraphicsFrame();
        
        soundPlayer sound_player = new soundPlayer();
        sound_player.play(true);
        //-----------------------------------------------

        //previous map
        Map previousMap = new Map();

        // executing simulation era
        while(true) {
            
            wait_miliseconds = 100;
            simulation_speed = map_frame.slider.getValue();
            wait_miliseconds -= simulation_speed;         
            
            if(simulation_speed == 0) {
                
                do {
                    sleep();
                } while (map_frame.slider.getValue() == 0);
                
            }

            boolean were_resources_mined = map.mine_resources();
            map.spawn_ships();
            map_frame.panel.update_map_frame(map.map_area);
            sleep();
            
            map.move_ships();
            sleep();

            map.activate_static_objects();
            sleep();
            
            map.conquer_planets_using_ships();
            sleep();

            if(map.equals(previousMap) && were_resources_mined == false && map.are_there_any_ships() == false) {
    
                break;
            }
            previousMap = map;

            map_frame.panel.update_map_frame(map.map_area);
            sleep();
            
            //System.out.println("------------------------------------------");
        }
        sound_player.play(false);
        System.out.println("Simulation ended");
        
    }

    private static void sleep() {
        try {
            TimeUnit.MILLISECONDS.sleep(wait_miliseconds);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }    
    
    private static void make_simulation_for_script(String[] args) {
        double planetation = Double.parseDouble(args[0]);
        int map_size = Integer.parseInt(args[1]);
        int stars_quantity = Integer.parseInt(args[2]);
        int black_holes_quantity = Integer.parseInt(args[3]);
        int aggresive_civilisation_quantity = Integer.parseInt(args[4]);
        int pacifistic_civilisation_quantity = Integer.parseInt(args[5]);
        int number_of_eras = Integer.parseInt(args[6]);
        int number_of_repeats = Integer.parseInt(args[7]);

        // System.out.println(planetation, map_size, stars_quantity, black_holes_quantity,
        // aggresive_civilisation_quantity, pacifistic_civilisation_quantity);
        for (int i = 0; i < number_of_repeats; i++) {
            Map map = new Map(planetation, map_size, stars_quantity, black_holes_quantity, aggresive_civilisation_quantity, pacifistic_civilisation_quantity);
            map.initialize_map();

            //print start marker for script
            System.out.println("-");

            // print planetation, map size, stars quantity, black holes quantity, aggresive civilisation quantity, pacifistic civilisation quantity, number of eras, number of repeats
            System.out.println(planetation + " " + map_size + " " + stars_quantity + " " + black_holes_quantity + " " + aggresive_civilisation_quantity + " " + pacifistic_civilisation_quantity);
            
            // print all info about particular civilization's ID's and types
            // PART 1 OF SCRIPT OUTPUT 2
            for (int civId = 0; civId < map.civ_list.size(); civId++) {
                System.out.print(civId + map.civ_list.get(civId).toString() + " ");
            }
            System.out.println();
            
            Map previousMap = new Map();
            for(int j = 0; j < number_of_eras; j++) {
                
                boolean were_resources_mined = map.mine_resources();
                
                // PART 2 OF SCRIPT OUTPUT 2
                for (pacifisticCivilization civ : map.civ_list) {
                    System.out.print(civ.owned_resources + " ");
                }
                System.out.println();
                
                
                map.spawn_ships();
                map.move_ships();
                map.conquer_planets_using_ships();
                map.activate_static_objects();
                if(map.equals(previousMap) && were_resources_mined == false && map.are_there_any_ships() == false){
                    break;
                }
                previousMap = map;
            }
            // print owned_resources from particular civilization at the end of each simulation
            //SCRIPT OUTPUT 1
            // for (pacifisticCivilization civilization : map.civ_list) {
                //     System.out.print(civilization.toString() + " " + civilization.owned_resources);
                //     System.out.println();
                // }
        }
                
        //print end marker for script
        System.out.println("-");

        /*
        * P 99123 0.02 15 2
        * A 12313
        * P 21331
        * 
        * 0.32 15 2 4
        * P 9213
        */
        }
    }
