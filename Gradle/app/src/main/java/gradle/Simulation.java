/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package gradle;

import java.time.Instant;

import java.util.concurrent.TimeUnit;


public abstract class Simulation {
    
    
    
    static long seconds_now;
    static long start_time;
    static long seconds_from_start;
    public static void main(String[] args) {
        
        //ONE OF THE FOLLOWING LINES SHOULD BE COMMENTED
        //THEY DO NOT WORK ON THE SAME DATA
        make_simulation_for_script(args); //for script (uncomment if needed)

        // show_simulation(); //for testing and showing simulation
    }

    private static void wait(long seconds, long start_time) {
        do{
            seconds_now = Instant.now().getEpochSecond();
            seconds_from_start = seconds_now - start_time ;
        }while(seconds_from_start < 2);
    }

    private static void show_simulation(){
        int map_size = 15;
        Map map = new Map(0.05, map_size, 2, 2, 2, 1);
        

        mapGraphicsFrame map_frame = new mapGraphicsFrame();
        map.initialize_map();
        map.show_map();
    
        
        // executing simulation era
        for(int i = 0; i < 10; i++) {
            start_time = Instant.now().getEpochSecond();

            Instant now = Instant.now();

            map.mine_resources();
            map.spawn_ships();
            map_frame.panel.update_map_frame(map.map_area);
            
            
            map.move_ships();
            map.activate_static_objects();
            map.conquer_planets_using_ships();
            map_frame.panel.update_map_frame(map.map_area);

            try {
                    TimeUnit.MILLISECONDS.sleep(200);
                } catch (InterruptedException e) {
                    e.printStackTrace();
            }
           // probalby there is need for a wait methods with ms

       //     wait( 1, start_time);
                        
            // map.mine_resources();
            // map.spawn_ships();
            // // wait(1, start_time);
            // System.out.println(System.lineSeparator().repeat(map_size+1));
            // System.out.println("Ships spawning");
            // //map.show_map();
            // map_frame.panel.update_map_frame(map.map_area);


            // map.move_ships();
            // // wait(1, start_time);
            // System.out.println(System.lineSeparator().repeat(map_size+1));
            // System.out.println("Ships moving");
            // //map.show_map();
            // map_frame.panel.update_map_frame(map.map_area);


            // start_time = Instant.now().getEpochSecond();
            // map.conquer_planets_using_ships();
            // //wait(1, start_time);
            // System.out.println(System.lineSeparator().repeat(map_size+1));
            // System.out.println("Ships conquering planets");
            // //map.show_map();
            // map_frame.panel.update_map_frame(map.map_area);
        
            // System.out.println("------------------------------------------");
        }
        System.out.println("Simulation ended");
    }

    private static void make_simulation_for_script(String[] args){
        double planetation = Double.parseDouble(args[0]);
        int map_size = Integer.parseInt(args[1]);
        int stars_quantity = Integer.parseInt(args[2]);
        int black_holes_quantity = Integer.parseInt(args[2]);
        int aggresive_civilisation_quantity = Integer.parseInt(args[3]);
        int pacifistic_civilisation_quantity = Integer.parseInt(args[4]);
        int number_of_eras = Integer.parseInt(args[5]);
        int number_of_repeats = Integer.parseInt(args[6]);

        
        // System.out.println(planetation + " " + map_size + " " + stars_quantity + " " + black_holes_quantity + " " + aggresive_civilisation_quantity + " " + pacifistic_civilisation_quantity + " " + number_of_eras + " " + number_of_repeats);
        for (int i = 0; i < number_of_repeats; i++) {
            Map map = new Map(planetation, map_size, stars_quantity, black_holes_quantity, aggresive_civilisation_quantity, pacifistic_civilisation_quantity);
            map.initialize_map();
            for(int j = 0; j < number_of_eras; j++) {
                map.mine_resources();
                map.spawn_ships();
                map.move_ships();
                map.conquer_planets_using_ships();
                map.activate_static_objects();
            }
            for (pacifisticCivilization civilization : map.civ_list) {
                //print all info about particular civilization at the end
                //of each simulation
                System.out.print(civilization.toString() + " " + civilization.owned_resources + " " + planetation + " " + map_size + " " + stars_quantity + " " + black_holes_quantity + " " + aggresive_civilisation_quantity + " " + pacifistic_civilisation_quantity + " " + number_of_eras + " " + number_of_repeats + " ");
                System.out.println();
            }
            
        }
    }
}
